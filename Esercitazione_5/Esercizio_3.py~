import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as color


file = pd.read_csv('oscilloscope.csv')

print(file)

tempo = file['time']
segnale_1 = file['signal1']
segnale_2 = file['signal2']

plt.plot(tempo, segnale_1, color='teal')
plt.xlabel('t(s)')
plt.ylabel(r'Segnale 1 (u.a.)')
plt.show()

#plt.plot(tempo, segnale_2, color='springgreen')
#plt.xlabel('t(s)')
#plt.ylabel(r'Segnale 2 (u.a.)')
#plt.show()


plt.plot(tempo, segnale_1, color='teal')
plt.plot(tempo, segnale_2, color='springgreen')
plt.xlabel('t(s)')
plt.ylabel(r'Segnale 2 (u.a.)')
plt.show()

def derivata1(x, y):
    l = len(x)
    dd = y[2:] - y[:l-2]
    dd = np.append(y[1]-y[0], dd)
    dd = np.append(dd, y[l-1]-y[l-2])
    
    hh = x[2:] - x[:l-2]
    hh = np.append(x[1]-x[0], hh)
    hh = np.append(hh, x[l-1]-x[l-2])
    
    return dd/hh

def derivata(x, y):
    der = [(y[1]-y[0])/(x[1]-x[0])]
    for i in range(0, len(y)-2):
        der.append((y[i+2]-y[i])/(x[i+2]-x[i]))
    der.append((y[len(y)-1]-y[len(y)-2])/(x[len(y)-1]-x[len(y)-2]))
    return der

print(len(derivata1(tempo, segnale_1)))
print(len(derivata(tempo, segnale_1)))

derivata_1 = derivata(tempo, segnale_1)

plt.plot(tempo, derivata_1, color='teal')
plt.xlabel('t(s)')
plt.ylabel(r'Derivata segnale 1 (u.a.)')
plt.show()

def my_derivative_vh(xx, yy, nh):
    dd = yy[nh:] - yy[:len(yy)-nh]
    hh = xx[nh:] - xx[:len(yy)-nh]
    for ih in range(int(nh/2)):
        dd = np.append(yy[nh-ih-1]-yy[0], dd)
        dd = np.append(dd, yy[len(yy)-1]-yy[len(yy)-(nh-ih)])
    
        hh = np.append(xx[nh-ih-1]-xx[0], hh)
        hh = np.append(hh, xx[len(yy)-1]-xx[len(yy)-(nh-ih)])
    
    return dd/hh

def derivata_n(x, y, n):
   # der = [(y[1]-y[0])/(x[1]-x[0])]
    indexmin = int(n/2)
    der = []
    for i in range(0, indexmin):
        der.append((y[n-i-1]-y[0])/(x[n-i-1]-x[0]))
    for i in range(0, len(y)-n):
        der.append((y[i+n]-y[i])/(x[i+n]-x[i]))
    for i in range(0, indexmin):
        der.append((y[len(y)-1]-y[len(y)-n-i])/(x[len(y)-1]-x[len(y)-n-1]))
    return der

#derivata_corretta = my_derivative_vh(tempo, segnale_1, 3)
derivata_corretta = derivata_n(tempo, segnale_1, 150)

plt.plot(tempo, derivata_corretta, color='teal')
plt.xlabel('t(s)')
plt.ylabel(r'Derivata segnale 1 (u.a.)')
plt.show()


plt.plot(tempo, segnale_1, color='royalblue')
plt.plot(tempo, derivata_corretta, color='indianred')
plt.xlabel('t(s)')
plt.ylabel(r'Derivata segnale 1 (u.a.)')
plt.show()
